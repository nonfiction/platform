version: '3.8'
services:

  <%=  $(bin/get app) %>:
    image: nonfiction/traefik:v1
    command:

      # Enable Docker in Traefik, so that it reads labels from Docker services
      - --providers.docker

      # Enable Docker Swarm mode
      - --providers.docker.swarmmode

      # Docker endpoint running on primary
      # - --providers.docker.endpoint=unix:///var/run/docker.sock
      - --providers.docker.endPoint=ssh://root@<%= $(bin/get PRIMARY_IP) %>:22

      # Do not expose all Docker services, only the ones explicitly exposed
      - --providers.docker.exposedbydefault=false

      # Use this docker network for container communications
      - --providers.docker.network=proxy

      # Enable the access log, with HTTP requests
      # - --accesslog

      # Enable the Traefik log, for configurations and errors
      - --log

      # Enable the Dashboard and API
      - --api
      # - --api.insecure
      - --pilot.dashboard=false

      # Allow backend services to serve https with self-signed certs
      - --serversTransport.insecureSkipVerify=true

      # Create a entrypoints http/https listening on ports 80/443
      - --entrypoints.web.address=:80
      - --entryPoints.web.forwardedHeaders.trustedIPs=<%= $(bin/get trusted_ips)|tr ' ' , %>
      - --entrypoints.websecure.address=:443
      - --entryPoints.websecure.forwardedHeaders.trustedIPs=<%= $(bin/get trusted_ips)|tr ' ' , %>

      # Support auto-renewing https certificates
      - --certificatesResolvers.digitalocean.acme.tlsChallenge=true
      - --certificatesResolvers.digitalocean.acme.dnsChallenge=true
      - --certificatesResolvers.digitalocean.acme.dnsChallenge.provider=digitalocean
      - --certificatesResolvers.digitalocean.acme.dnsChallenge.resolvers=1.1.1.1:53,8.8.8.8:53
      - --certificatesResolvers.digitalocean.acme.dnsChallenge.delaybeforecheck=0
      - --certificatesResolvers.digitalocean.acme.caserver=https://acme-staging-v02.api.letsencrypt.org/directory
      - --certificatesResolvers.digitalocean.acme.email=dns@nonfiction.ca
      - --certificatesResolvers.digitalocean.acme.storage=/acme.json

      # Support metrics for prometheus
      - --metrics
      - --metrics.prometheus=true
      - --metrics.prometheus.buckets=0.100000, 0.300000, 1.200000, 5.000000
      - --metrics.prometheus.addServicesLabels=true
      - --metrics.prometheus.addEntryPointsLabels=true
      - --entryPoints.metrics.address=:8082

      # Watch configuration file
      - --providers.file.directory=/data/traefik
      - --providers.file.watch=true

    deploy:
      mode: global

      restart_policy:
        condition: on-failure

      labels:
        traefik.enable: "true"
        traefik.docker.network: "proxy"
        traefik.docker.lbswarm: "true"

        # Domains Certificates
        traefik.http.routers.wildcard-certs.tls.certresolver: "digitalocean" 
        <% i=0; for node in $(bin/get nodes); do %>
        # <%= ${node}.$(bin/get domain) %>
        traefik.http.routers.wildcard-certs.tls.domains[<%= $i -%>].main: "<%= ${node}.$(bin/get domain) -%>"
        traefik.http.routers.wildcard-certs.tls.domains[<%= $i -%>].sans: "*.<%= ${node}.$(bin/get domain) -%>"
        <% i=$((i+1)) -%>
        <% done -%>

        # Dashboards
        traefik.http.routers.<%=  $(bin/get app) %>.rule: "Host(<%= $(bin/get csv $(bin/get hosts)) %>)"
        traefik.http.routers.<%=  $(bin/get app) %>.entrypoints: "websecure"
        traefik.http.routers.<%=  $(bin/get app) %>.tls: "true"
        traefik.http.routers.<%=  $(bin/get app) %>.service: "api@internal"
        traefik.http.services.<%= $(bin/get app) %>.loadbalancer.server.port: "8080"
        traefik.http.routers.<%=  $(bin/get app) %>.middlewares: "basicauth@docker"
        traefik.http.middlewares.basicauth.basicauth.users: '<%= $(bin/get basic_auth BASICAUTH_USER BASICAUTH_PASSWORD) %>'

        # Metrics
        traefik.http.routers.<%= $(APP=metrics bin/get app) %>.rule: "Host(<%= $(bin/get csv $(APP=metrics bin/get hosts)) %>)"
        traefik.http.routers.<%= $(APP=metrics bin/get app) %>.entrypoints: "websecure"
        traefik.http.routers.<%= $(APP=metrics bin/get app) %>.tls: "true"
        traefik.http.routers.<%= $(APP=metrics bin/get app) %>.service: "prometheus@internal"
        traefik.http.routers.<%= $(APP=metrics bin/get app) %>.middlewares: "basicauth@docker"

        # Global redirect to https
        traefik.http.routers.http-catchall.rule: "hostregexp(`{host:.+}`)"
        traefik.http.routers.http-catchall.entrypoints: "web"
        traefik.http.routers.http-catchall.middlewares: "redirect-to-https@docker"
        traefik.http.middlewares.redirect-to-https.redirectscheme.scheme: "https"

    networks:
      - proxy

    ports:
      - target: 80
        published: 80
        mode: host
      - target: 443
        published: 443
        mode: host

    environment:
      DO_AUTH_TOKEN: "<%= $(bin/get DO_AUTH_TOKEN) %>"
      ROOT_PRIVATE_KEY: "<%= $(bin/get ROOT_PRIVATE_KEY) %>"

    logging:
      options:
        max-size: "1m"

    volumes:
      - /data/platform/<%= $(bin/get app) %>/acme.json:/acme.json

networks:
  proxy:
    name: proxy
    driver: overlay
    attachable: true
